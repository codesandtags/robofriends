{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Footer.js","components/Header.js","components/GithubCorner/index.js","components/GithubCorner/GithubCorner.js","containers/App.js","store/actions.js","store/constants.js","api/robots.js","serviceWorker.js","store/reducers.js","index.js"],"names":["Card","robot","name","email","robotType","isPet","urlImage","className","src","alt","CardList","robots","map","key","id","SearchBox","searchChange","type","autoFocus","placeholder","onChange","Footer","href","target","rel","role","aria-label","Header","GithubCorner","url","width","height","viewBox","style","fill","color","position","top","border","right","aria-hidden","d","transformOrigin","connect","state","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","payload","value","onRequestRobots","fetch","then","response","json","users","catch","props","filteredRobots","filter","toLowerCase","includes","cardList","renderedCardList","undefined","useEffect","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","store","createStore","combineReducers","action","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7fd7ecb2.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Card = ({ robot }) => {\n    const { name, email, isPet } = robot;\n    const imageSize = 150;\n    const robotType = isPet ? 4 : 1;\n    const urlImage = `https://robohash.org/${name}?size=${imageSize}x${imageSize}&set=set${robotType}`;\n\n    return (\n        <div className=\"tc grow bg-light-blue br3 pa2 ma3 dib bw2 shadow-5 w5 mr2\">\n            <img src={urlImage} alt={name}/>\n            <div>\n                <h3 className=\"f4\">{name}</h3>\n                <p className=\"ttl f6 lh-copy\">{email}</p>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { Card } from './Card'\n\nexport const CardList = ({ robots }) => {\n    return (\n        <div className=\"flex flex-wrap w-80 center mw9 justify-center-m\">\n            {robots.map((robot) => (\n                <Card key={robot.id} robot={robot} />\n            ))}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const SearchBox = ({ searchChange }) => {\n    return (\n        <div className=\"pa2 ma2 flex justify-center center\">\n            <input\n                type=\"search\"\n                autoFocus\n                placeholder=\"Search your favorite robot ðŸ¤– \"\n                className=\"pa3 ba b--green bg-lightest-blue w-100 w-50-ns br2\"\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const Footer = () => {\n    return (\n        <footer className=\"white-80 center w-100  pa2 ma4\">\n            <a\n                href=\"https://robohash.org/\"\n                className=\"white\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Images taken from Robohash{' '}\n                <span role=\"img\" aria-label=\"Robot\">\n                    ðŸ¤–\n                </span>\n            </a>\n        </footer>\n    )\n}\n","import React from 'react'\n\nexport const Header = () => {\n    return <h1 className=\"ma4 mt5-m f2 f1-l\">RoboFriends</h1>\n}\n","import GithubCorner from './GithubCorner';\n\nexport default GithubCorner;","import React from 'react';\n\nimport './GithubCorner.css';\n\nconst GithubCorner = ({url}) => {\n    return (\n        <div className=\"absolute top-0 right-0\">\n            <a href={url}\n               target=\"_blank\"\n               className=\"github-corner\"\n               aria-label=\"View source on GitHub\"\n               rel=\"noopener noreferrer\"\n            >\n                <svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\"\n                     style={{\n                         fill: '#151513',\n                         color: '#fff',\n                         position: 'absolute',\n                         top: 0,\n                         border: 0,\n                         right: 0,\n                     }}\n                     aria-hidden=\"true\">\n                    <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path>\n                    <path\n                        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n                        fill=\"currentColor\"\n                        style={{transformOrigin: '130px 106px'}}\n                        className=\"octo-arm\"></path>\n                    <path\n                        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n                        fill=\"currentColor\" className=\"octo-body\"></path>\n                </svg>\n            </a>\n        </div>\n    )\n}\n\nexport default GithubCorner;","import React, { useEffect } from 'react'\n\nimport './App.css'\nimport { CardList } from '../components/CardList'\nimport { SearchBox } from '../components/SearchBox'\nimport { Footer } from '../components/Footer'\nimport { Header } from '../components/Header'\n\n// Redux\nimport { connect } from 'react-redux'\nimport { requestRobots, setSearchField } from '../store/actions'\nimport GithubCorner from '../components/GithubCorner'\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots()),\n    }\n}\n\nconst App = (props) => {\n    const {\n        robots,\n        isPending,\n        error,\n        searchField,\n        onRequestRobots,\n        onSearchChange,\n    } = props\n    const filteredRobots = robots.filter((robot) => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    const cardList = isPending ? (\n        <h2 className=\"mt6 mb7\"> Loading robots... </h2>\n    ) : (\n        <CardList robots={filteredRobots} />\n    )\n    const renderedCardList =\n        error !== undefined ? (\n            <h2 className=\"mt6 mb7\">\n                {' '}\n                Sorry, there are not{' '}\n                <span role=\"img\" aria-label=\"robots\">\n                    ðŸ¤–\n                </span>{' '}\n                available\n            </h2>\n        ) : (\n            cardList\n        )\n\n    useEffect(() => {\n        if (robots.length === 0) {\n            onRequestRobots()\n        }\n    }, [robots, onRequestRobots])\n\n    return (\n        <div className=\"tc\">\n            <GithubCorner url=\"https://github.com/codesandtags/robofriends\" />\n            <Header />\n            <SearchBox searchChange={onSearchChange} />\n            {renderedCardList}\n            <Footer />\n        </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import * as action from './constants';\nimport { url } from '../api/robots';\n\nexport const setSearchField = text => ({\n    type: action.CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({\n        type: action.REQUEST_ROBOTS_PENDING\n    });\n\n    fetch(url)\n        .then(response => response.json())\n        .then((users) => {\n            dispatch({\n                type: action.REQUEST_ROBOTS_SUCCESS,\n                payload: users\n            });\n        })\n        .catch((error) => {\n            dispatch({\n                type: action.REQUEST_ROBOTS_FAILED,\n                payload: error\n            })\n        });\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n    isPet: false\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n    isPet: false\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n    isPet: false\n  },\n  {\n    id: 4,\n    name: 'Churrita',\n    username: 'churris',\n    email: 'lis@kory.org',\n    isPet: false\n  },\n  {\n    id: 5,\n    name: 'Edwin Torres',\n    username: 'codesandtags',\n    email: 'codesandtags@gmail.com',\n    isPet: false\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n    isPet: false\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n    isPet: false\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n    isPet: false\n  },\n  {\n    id: 9,\n    name: 'Nala',\n    username: 'Delphine',\n    email: 'lamichimueca@cats.com',\n    isPet: true\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n    isPet: false\n  }\n];\n\nexport const url = 'https://jsonplaceholder.typicode.com/users';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister()\n            })\n            .catch((error) => {\n                console.error(error.message)\n            })\n    }\n}\n","import * as actionType from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\n/**\n * Search Robots Reducer\n * @param state\n * @param action\n */\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case actionType.CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload\n            };\n        default:\n            return state;\n    }\n}\n\n\nconst initialStateRobots = {\n    isPending: false,\n    error: undefined,\n    robots: []\n};\n\n/**\n *\n * @param state\n * @param action\n * @returns {{searchField: string, robots: {}}|{searchField: string, robots: *}}\n */\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case actionType.REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            };\n\n        case actionType.REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                error: undefined,\n                isPending: false,\n                robots: action.payload\n            };\n\n        case actionType.REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                isPending: false\n            };\n\n        default:\n            return state;\n\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\n// import { createLogger } from 'redux-logger/src'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css'\nimport App from './containers/App'\nimport 'tachyons'\n\nimport * as serviceWorker from './serviceWorker'\nimport { requestRobots, searchRobots } from './store/reducers'\n\n// const logger = createLogger()\nconst store = createStore(\n    combineReducers({ searchRobots, requestRobots }),\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n)\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}